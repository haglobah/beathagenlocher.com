---

const { class: className, size = "max-h-[30vh]" } = Astro.props

---

<div class:list={["clamp-wrapper relative overflow-hidden", className]}>
  <div class:list={["clamp-content transition-all duration-300 ease-in-out", size]}>
    <slot />
  <div class="clamp-fade-overlay absolute bottom-0 w-full h-20 pointer-events-none bg-gradient-to-t from-zinc-800 from-10% to-50% to-transparent hidden">
  </div>
  <button class="clamp-toggle-button absolute inset-x-0 bottom-0 f-h-md bg-transparent f-text-xs text-zinc-400 hover:text-cornflower transition-all duration-200 hidden">
    <span class="clamp-button-text">Show more</span>
  </button>
  </div>
</div>

<script define:vars={{ size }}>
document.addEventListener('DOMContentLoaded', () => {
  const clampWrapper = document.querySelector('.clamp-wrapper');

  const content = clampWrapper.querySelector('.clamp-content');
  const toggleButton = clampWrapper.querySelector('.clamp-toggle-button');
  const fadeOverlay = clampWrapper.querySelector('.clamp-fade-overlay');

  // Function to determine if the content is truncated
  const isTruncated = (element) => {
    const temp = element.cloneNode(true);

    temp.style.position = "fixed";
    temp.style.overflow = "visible";
    temp.style.whiteSpace = "nowrap";
    temp.style.visibility = "hidden";

    element.parentElement.appendChild(temp);

    try {
      const fullHeight = temp.getBoundingClientRect().height;
      const displayHeight = element.getBoundingClientRect().height;

      console.log(fullHeight,  " >? ",  displayHeight + 50)

      return fullHeight > displayHeight + 50;
    } finally {
      temp.remove();
    }
  }

  // Show or hide the toggle button and fade overlay based on truncation
  if (isTruncated(content)) {
    console.log("Truncated!")
    toggleButton.classList.remove('hidden');
    fadeOverlay.classList.remove('hidden');
  } else {
    console.log("Not Truncated!")
    toggleButton.classList.add('hidden');
    fadeOverlay.classList.add('hidden');
  }

  toggleButton.addEventListener('click', () => {

    const buttonText = toggleButton.querySelector('.clamp-button-text')

    content.classList.toggle(size);
    // clampWrapper.classList.toggle("overlow-hidden");
    // toggleButton.classList.toggle("absolute");

    if (content.classList.contains(size)) {
      // If content is clamped, show the fade overlay and set button to "Show More"
      fadeOverlay.classList.remove('hidden');
      buttonText.textContent = 'Show More';
    } else {
      // If content is expanded, hide the fade overlay and set button to "Show Less"
      fadeOverlay.classList.add('hidden');
      buttonText.textContent = 'Show Less';
    }
  });

  // Re-evaluate on window resize
  window.addEventListener('resize', () => {
    content.classList.add(size);
    fadeOverlay.classList.add('hidden');

    if (content.scrollHeight > content.clientHeight) {
      toggleButton.classList.remove('hidden');
      fadeOverlay.classList.remove('hidden');

      // Reset content to clamped state if it was expanded
      if (!content.classList.contains(size)) {
        content.classList.add(size);
        toggleButton.querySelector('.clamp-button-text').textContent = 'Show More';
      }
    } else {
      toggleButton.classList.add('hidden');
      fadeOverlay.classList.add('hidden');
    }
  });
});
</script>
