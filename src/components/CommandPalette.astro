---
export interface Props {
  placeholder?: string
}

const { placeholder = 'Search commands...' } = Astro.props
---

<div
  id="command-palette"
  class="hidden fixed inset-0 z-50 items-center justify-center p-4"
>
  <div class="fixed inset-0 bg-black bg-opacity-50" id="palette-backdrop"></div>
  <div
    class="relative bg-zinc-900 rounded-lg shadow-xl w-full max-w-2xl border border-zinc-700"
  >
    <input
      type="text"
      id="palette-input"
      class="w-full px-4 py-3 bg-transparent text-zinc-100 placeholder-zinc-500 outline-none border-b border-zinc-700"
      placeholder={placeholder}
      autocomplete="off"
    />
    <div id="palette-results" class="max-h-96 overflow-y-auto"></div>
  </div>
</div>

<script>
  import { atom } from 'nanostores'
  import { $commandItems } from '../store.ts'

  let isOpen = false
  let selectedIndex = 0
  let filteredItems: CommandItem[] = []

  const palette = document.getElementById('command-palette')!
  const input = document.getElementById('palette-input') as HTMLInputElement
  const results = document.getElementById('palette-results')!
  const backdrop = document.getElementById('palette-backdrop')!

  function open() {
    isOpen = true
    palette.classList.remove('hidden')
    palette.classList.add('flex')
    input.focus()
    selectedIndex = 0
    render()
  }

  function close() {
    isOpen = false
    palette.classList.add('hidden')
    palette.classList.remove('flex')
    input.value = ''
    selectedIndex = 0
  }

  function fuzzyMatch(query: string, text: string): boolean {
    const q = query.toLowerCase()
    const t = text.toLowerCase()
    let qi = 0
    for (let ti = 0; ti < t.length && qi < q.length; ti++) {
      if (t[ti] === q[qi]) qi++
    }
    return qi === q.length
  }

  function filter(query: string): CommandItem[] {
    if (!query) return $commandItems.get()

    return $commandItems.get().filter((item) => {
      const searchText = [
        item.name,
        item.description || '',
        ...(item.keywords || []),
      ].join(' ')
      return fuzzyMatch(query, searchText)
    })
  }

  function render() {
    const query = input.value
    filteredItems = filter(query)

    if (filteredItems.length === 0) {
      results.innerHTML =
        '<div class="px-4 py-8 text-center text-zinc-500">No commands found</div>'
      return
    }

    results.innerHTML = filteredItems
      .map((item, index) => {
        const isSelected = index === selectedIndex
        return `
          <div
            class="px-4 py-3 cursor-pointer transition-colors ${
              isSelected
                ? 'bg-zinc-800 text-zinc-100'
                : 'text-zinc-300 hover:bg-zinc-800'
            }"
            data-index="${index}"
          >
            <div class="font-medium">${item.name}</div>
            ${item.description ? `<div class="text-sm text-zinc-500">${item.description}</div>` : ''}
          </div>
        `
      })
      .join('')

    // Add click handlers
    results.querySelectorAll('[data-index]').forEach((el) => {
      el.addEventListener('click', () => {
        const index = parseInt((el as HTMLElement).dataset.index!)
        execute(filteredItems[index])
      })
    })
  }

  function execute(item: CommandItem) {
    close()
    item.handler()
  }

  function moveSelection(delta: number) {
    selectedIndex = Math.max(
      0,
      Math.min(filteredItems.length - 1, selectedIndex + delta),
    )
    render()
  }

  // Global keyboard handler
  document.addEventListener('keydown', (e) => {
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault()
      if (isOpen) {
        close()
      } else {
        open()
      }
      return
    }

    if (!isOpen) return

    switch (e.key) {
      case 'Escape':
        e.preventDefault()
        close()
        break
      case 'ArrowDown':
        e.preventDefault()
        moveSelection(1)
        break
      case 'ArrowUp':
        e.preventDefault()
        moveSelection(-1)
        break
      case 'Enter':
        e.preventDefault()
        if (filteredItems[selectedIndex]) {
          execute(filteredItems[selectedIndex])
        }
        break
    }
  })

  // Input handler
  input.addEventListener('input', () => {
    selectedIndex = 0
    render()
  })

  // Backdrop click
  backdrop.addEventListener('click', close)

  // Initial render
  render()
</script>
