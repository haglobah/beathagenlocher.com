---
import Highlight from '../components/Highlight.astro'
import TopicSelector from '../components/TopicSelector.tsx'

export interface Props {
  placeholder?: string
}

const { placeholder = 'Search commands...' } = Astro.props
---

<div id="command-palette" class="hidden fixed inset-0 top-[20%] z-50 justify-center p-4">
  <div class="fixed inset-0 bg-black bg-opacity-50" id="palette-backdrop"></div>
  <div class="relative bg-zinc-900 rounded-lg shadow-xl w-full max-w-5xl flex flex-col">
    <div id="topic-selector" class="hidden rounded-t-lg bg-zinc-950">
      <div class="text-xs pt-4 px-4 text-zinc-500 uppercase mb-2">
        Select Topic (<span class="font-mono text-cornflower bg-zinc-900">TAB</span>, <span
          class="i-heroicons:arrow-up-20-solid text-cornflower inline-block size-[1.2em]"></span>, <span
          class="i-heroicons:arrow-down-20-solid text-cornflower inline-block size-[1.2em]"></span>)
      </div>
      <div id="topic-selector-items" class="flex flex-wrap p-4 gap-2 max-h-32 overflow-y-auto">
      </div>
    </div>
    <div class="flex flex-1 min-h-0">
      <div class="flex-1 flex flex-col min-w-0">
        <div class="px-4 py-2 f-text-xs font-light">
          Type <span class="f-text-sm font-medium text-cornflower">#</span> to select from topics
        </div>
        <input
          type="text"
          id="palette-input"
          class="w-full px-4 py-3 bg-transparent text-zinc-100 placeholder:text-zinc-500 placeholder:f-text-xs outline-none"
          placeholder={placeholder}
          autocomplete="off"
        />
        <div id="palette-results" class="max-h-96 overflow-y-auto"></div>
      </div>
      <div id="palette-preview" class="hidden md:block w-96 p-4 overflow-y-auto bg-zinc-950">
        <div id="preview-content" class="text-sm text-zinc-400"></div>
      </div>
    </div>
  </div>
</div>

<script>
  import FlexSearch from 'flexsearch'
  import { $commandItems, $filteredTopics, setFilteredTopics } from '../store/commandPalette.ts'

  interface SearchResult {
    id: string
    type: string
    title: string
    description: string
    url: string
    body: string
    topics: string[]
  }

  let isOpen = false
  let selectedIndex = 0
  let filteredItems: (CommandItem | SearchResult)[] = []
  let searchIndex: SearchResult[] = []
  let searchIndexLoaded = false
  let contentIndex: FlexSearch.Index | null = null
  let commandIndex: FlexSearch.Index | null = null
  let isTopicMode = false
  let selectedTopicIndex = 0
  let allTopics: string[] = []
  let topicCounts: Map<string, number> = new Map()

  const palette = document.getElementById('command-palette')!
  const input = document.getElementById('palette-input') as HTMLInputElement
  const results = document.getElementById('palette-results')!
  const backdrop = document.getElementById('palette-backdrop')!
  const previewPane = document.getElementById('palette-preview')!
  const previewContent = document.getElementById('preview-content')!
  const topicSelector = document.getElementById('topic-selector')!
  const topicSelectorItems = document.getElementById('topic-selector-items')!

  const showPalette = (palette: HTMLElement) => {
    palette.classList.remove('hidden')
    palette.classList.add('flex')
  }

  const hidePalette = (palette: HTMLElement) => {
    palette.classList.add('hidden')
    palette.classList.remove('flex')
  }

  const hidePreview = (previewPane: HTMLELement) => previewPane.classList.remove('md:block')
  const showPreview = (previewPane: HTMLELement) => previewPane.classList.add('md:block')

  function updateQueryParams(query: string) {
    const params = new URLSearchParams(window.location.search)
    if (query) {
      params.set('q', query)
    } else {
      params.delete('q')
    }
    window.history.replaceState({}, '', `${window.location.pathname}?${params}`)
  }

  function getQueryFromParams(): string {
    const params = new URLSearchParams(window.location.search)
    return params.get('q') || ''
  }

  async function loadSearchIndex() {
    if (searchIndexLoaded) return
    try {
      const response = await fetch('/api/search-index.json')
      searchIndex = await response.json()
      searchIndexLoaded = true

      contentIndex = new FlexSearch.Index({
        tokenize: 'forward',
        cache: true,
        context: {
          resolution: 9,
          depth: 2,
          bidirectional: true,
        },
      })

      searchIndex.forEach((item, idx) => {
        const topicsText = item.topics ? item.topics.join(' ') : ''
        const searchableText = `${item.title} ${item.description} ${topicsText} ${item.body}`
        contentIndex!.add(idx, searchableText)
      })

      const topicsMap = new Map<string, number>()
      searchIndex.forEach((item) => {
        if (item.topics) {
          item.topics.forEach((topic) => {
            topicsMap.set(topic, (topicsMap.get(topic) || 0) + 1)
          })
        }
      })
      topicCounts = topicsMap
      allTopics = Array.from(topicsMap.keys()).sort()
    } catch (error) {
      console.error('Failed to load search index:', error)
    }
  }

  function open() {
    isOpen = true
    showPalette(palette)
    input.focus()
    selectedIndex = 0
    loadSearchIndex()

    const commands = $commandItems.get()
    commandIndex = new FlexSearch.Index({
      tokenize: 'forward',
      cache: true,
    })

    commands.forEach((cmd, idx) => {
      const searchableText = `${cmd.name} ${cmd.description || ''} ${cmd.keywords?.join(' ') || ''}`
      commandIndex!.add(idx, searchableText)
    })

    const queryFromParams = getQueryFromParams()
    if (queryFromParams) {
      input.value = queryFromParams
    }
    render()
  }

  function close() {
    isOpen = false
    hidePalette(palette)
    input.value = ''
    selectedIndex = 0
    isTopicMode = false
    topicSelector.classList.add('hidden')
    hidePreview(previewPane)
    updateQueryParams('')
  }

  function checkTopicMode(query: string): {
    isTopicMode: boolean
    topicQuery: string
  } {
    const hashIndex = query.lastIndexOf('#')
    if (hashIndex === -1) {
      return { isTopicMode: false, topicQuery: '' }
    }

    const afterHash = query.slice(hashIndex + 1)
    const hasSpaceAfterHash = afterHash.includes(' ')

    if (hasSpaceAfterHash) {
      return { isTopicMode: false, topicQuery: '' }
    }

    return { isTopicMode: true, topicQuery: afterHash.toLowerCase() }
  }

  function filterTopics(query: string): string[] {
    if (!query) return allTopics

    return allTopics
      .filter((topic) => topic.toLowerCase().includes(query))
      .sort((a, b) => {
        const aStarts = a.toLowerCase().startsWith(query)
        const bStarts = b.toLowerCase().startsWith(query)
        if (aStarts && !bStarts) return -1
        if (!aStarts && bStarts) return 1
        return a.localeCompare(b)
      })
  }

  function scrollIntoView(dataSelector, index, selection) {
    const selectedElement = selection.querySelector(
      '[' + dataSelector + '="' + index + '"]',
    ) as HTMLElement | null
    if (selectedElement) {
      selectedElement.scrollIntoView({ behavior: 'instant', block: 'nearest' })
    }
  }

  function renderTopicSelector() {
    if ($filteredTopics.get().length === 0) {
      topicSelectorItems.innerHTML = '<div class="text-zinc-500 text-sm">No topics found</div>'
      return
    }

    topicSelectorItems.innerHTML = $filteredTopics.get()
      .map((topic, index) => {
        const isSelected = index === selectedTopicIndex
        const count = topicCounts.get(topic) || 0
        return `
          <div
            class="f-text-xs cursor-pointer transition-all"
            data-topic-index="${index}"
          >
            <span class="flex rounded-full px-[0.9em] py-[0.5em] font-medium leading-5 ${
              isSelected
                ? 'bg-sienna-mid/30 text-white hover:bg-sienna-mid/40 shadow-[0_0_12px_rgba(119,158,203,0.5)]'
                : 'bg-sienna-mid/10 text-sienna-mid hover:bg-sienna-mid/20'
            }">
              ${topic}
              <span class="ml-2 text-zinc-500">${count}</span>
            </span>
          </div>
        `
      })
      .join('')

    topicSelectorItems.querySelectorAll('[data-topic-index]').forEach((el) => {
      el.addEventListener('click', () => {
        const index = parseInt((el as HTMLElement).dataset.topicIndex!)
        selectTopic($filteredTopics.get()[index])
      })
    })

    scrollIntoView('data-topic-index', selectedTopicIndex, topicSelectorItems)
  }

  function selectTopic(topic: string) {
    const currentValue = input.value
    const hashIndex = currentValue.lastIndexOf('#')

    const beforeHash = currentValue.slice(0, hashIndex)
    input.value = beforeHash + topic + ' '

    isTopicMode = false
    topicSelector.classList.add('hidden')
    selectedIndex = 0
    updateQueryParams(input.value)
    render()
    input.focus()
  }

  function searchContent(query: string): SearchResult[] {
    if (!query || !searchIndexLoaded || !contentIndex) return []

    const results = contentIndex.search(query, { limit: 10 })
    return results.map((idx) => searchIndex[idx as number])
  }

  function searchCommands(query: string): CommandItem[] {
    const commands = $commandItems.get()
    if (!query || !commandIndex) return commands

    const results = commandIndex.search(query)
    return results.map((idx) => commands[idx as number])
  }

  function filter(query: string): (CommandItem | SearchResult)[] {
    const commands = searchCommands(query)
    const contentResults = searchContent(query)

    if (!query) return commands

    return [...commands, ...contentResults]
  }

  function isSearchResult(item: any): item is SearchResult {
    return 'url' in item && 'type' in item
  }

  function highlightMatches(text: string, query: string): string {
    if (!query) return text

    const terms = query.toLowerCase().split(/\s+/).filter(Boolean)
    let result = text

    terms.forEach((term) => {
      const regex = new RegExp(`(${term})`, 'gi')
      result = result.replace(regex, '<mark class="bg-sienna-light text-zinc-800">$1</mark>')
    })

    return result
  }

  function getContextSnippet(text: string, query: string): string {
    if (!query) return text.slice(0, 300) + '...'

    const terms = query.toLowerCase().split(/\s+/).filter(Boolean)
    const lowerText = text.toLowerCase()

    let bestIndex = -1
    let bestScore = 0

    for (let i = 0; i < lowerText.length; i++) {
      let score = 0
      terms.forEach((term) => {
        if (lowerText.slice(i, i + 100).includes(term)) {
          score++
        }
      })
      if (score > bestScore) {
        bestScore = score
        bestIndex = i
      }
    }

    if (bestIndex === -1) {
      return text.slice(0, 300) + '...'
    }

    const start = Math.max(0, bestIndex - 50)
    const end = Math.min(text.length, bestIndex + 250)
    const snippet = text.slice(start, end)

    return (start > 0 ? '...' : '') + snippet + (end < text.length ? '...' : '')
  }

  function updatePreview(item: CommandItem | SearchResult) {
    if (isSearchResult(item)) {
      const query = input.value
      const snippet = getContextSnippet(item.body, query)
      const highlighted = highlightMatches(snippet, query)

      const topicBadges =
        item.topics && item.topics.length > 0
          ? `<div class="flex flex-wrap gap-2 mt-3">
            ${item.topics
              .map((t) => {
                const queryTerms = query.toLowerCase().split(/\s+/).filter(Boolean)
                const isMatch = queryTerms.some((term) => t.toLowerCase().includes(term))
                const bgClass = isMatch ? 'bg-sienna-mid/30' : 'bg-sienna-mid/10'
                const textClass = isMatch ? 'text-white' : 'text-sienna-mid'

                return `
                <div class="f-text-xs">
                  <span class="flex rounded-full ${bgClass} px-[0.9em] py-[0.5em] font-medium leading-5 ${textClass}">
                    ${t}
                  </span>
                </div>
              `
              })
              .join('')}
           </div>`
          : ''

      previewContent.innerHTML = `
        <div class="mb-4">
          <div class="text-xs text-zinc-500 uppercase mb-1">${item.type}</div>
          <div class="text-lg font-medium text-zinc-100 mb-2">${item.title}</div>
          ${item.description ? `<div class="text-sm text-zinc-400 mb-3">${item.description}</div>` : ''}
          ${topicBadges}
        </div>
        <div class="text-zinc-300 leading-relaxed whitespace-pre-wrap">${highlighted}</div>
      `
      showPreview(previewPane)
    } else {
      previewContent.innerHTML = `
        <div class="mb-4">
          <div class="text-lg font-medium text-zinc-100 mb-2">${item.name}</div>
          ${item.description ? `<div class="text-sm text-zinc-400">${item.description}</div>` : ''}
        </div>
        ${item.keywords ? `<div class="text-xs text-zinc-500 mt-4">Keywords: ${item.keywords.join(', ')}</div>` : ''}
      `
      showPreview(previewPane)
    }
  }

  function render() {
    const query = input.value
    const topicModeCheck = checkTopicMode(query)

    if (topicModeCheck.isTopicMode) {
      isTopicMode = true
      const filtered = filterTopics(topicModeCheck.topicQuery)
      setFilteredTopics(filtered)
      selectedTopicIndex = 0
      topicSelector.classList.remove('hidden')
      renderTopicSelector()
      results.innerHTML = ''
      hidePreview(previewPane)
      return
    } else {
      isTopicMode = false
      topicSelector.classList.add('hidden')
    }

    filteredItems = filter(query)

    if (filteredItems.length === 0) {
      results.innerHTML = '<div class="px-4 py-8 text-center text-zinc-500">No results found</div>'
      hidePreview(previewPane)
      return
    }

    results.innerHTML = filteredItems
      .map((item, index) => {
        const isSelected = index === selectedIndex

        if (isSearchResult(item)) {
          return `
            <div
              class="px-4 py-3 cursor-pointer transition-colors ${
                isSelected ? 'bg-zinc-800 text-zinc-100' : 'text-zinc-300 hover:bg-zinc-800'
              }"
              data-index="${index}"
            >
              <div class="flex items-center gap-2">
                <span class="text-xs px-2 py-0.5 rounded bg-zinc-700 text-zinc-400">${item.type}</span>
                <div class="font-medium">${item.title}</div>
              </div>
              ${item.description ? `<div class="text-sm text-zinc-500 mt-1">${item.description}</div>` : ''}
            </div>
          `
        } else {
          return `
            <div
              class="px-4 py-3 cursor-pointer transition-colors ${
                isSelected ? 'bg-zinc-800 text-zinc-100' : 'text-zinc-300 hover:bg-zinc-800'
              }"
              data-index="${index}"
            >
              <div class="font-medium">${item.name}</div>
              ${item.description ? `<div class="text-sm text-zinc-500">${item.description}</div>` : ''}
            </div>
          `
        }
      })
      .join('')

    results.querySelectorAll('[data-index]').forEach((el) => {
      el.addEventListener('click', () => {
        const index = parseInt((el as HTMLElement).dataset.index!)
        execute(filteredItems[index])
      })
    })

    if (filteredItems[selectedIndex]) {
      updatePreview(filteredItems[selectedIndex])
      scrollIntoView('data-index', selectedIndex, results)
    }
  }

  function execute(item: CommandItem | SearchResult) {
    close()
    if (isSearchResult(item)) {
      window.location.href = item.url
    } else {
      item.handler()
    }
  }

  function moveSelection(delta: number) {
    if (isTopicMode) {
      selectedTopicIndex = Math.max(
        0,
        Math.min($filteredTopics.get().length - 1, selectedTopicIndex + delta),
      )
      renderTopicSelector()
    } else {
      selectedIndex = Math.max(0, Math.min(filteredItems.length - 1, selectedIndex + delta))
      render()
    }
  }

  document.addEventListener('keydown', (e) => {
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault()
      if (isOpen) {
        close()
      } else {
        open()
      }
      return
    }

    if (!isOpen) return

    switch (e.key) {
      case 'Escape':
        e.preventDefault()
        close()
        break
      case 'ArrowDown':
        e.preventDefault()
        moveSelection(1)
        break
      case 'ArrowUp':
        e.preventDefault()
        moveSelection(-1)
        break
      case 'Tab':
        if (isTopicMode) {
          e.preventDefault()
          moveSelection(e.shiftKey ? -1 : 1)
        }
        break
      case 'Enter':
        e.preventDefault()
        const filteredTopicsValue = $filteredTopics.get()
        if (isTopicMode && filteredTopicsValue[selectedTopicIndex]) {
          selectTopic(filteredTopicsValue[selectedTopicIndex])
        } else if (filteredItems[selectedIndex]) {
          execute(filteredItems[selectedIndex])
        }
        break
    }
  })

  input.addEventListener('input', () => {
    selectedIndex = 0
    selectedTopicIndex = 0
    updateQueryParams(input.value)
    render()
  })

  backdrop.addEventListener('click', close)

  function initializeFromParams() {
    const queryFromParams = getQueryFromParams()
    if (queryFromParams) {
      open()
      updateQueryParams(input.value)
      render()
    }
  }

  initializeFromParams()
</script>
