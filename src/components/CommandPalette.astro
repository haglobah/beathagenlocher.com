---
export interface Props {
  placeholder?: string
}

const { placeholder = 'Search commands...' } = Astro.props
---

<div
  id="command-palette"
  class="hidden fixed inset-0 z-50 items-center justify-center p-4"
>
  <div class="fixed inset-0 bg-black bg-opacity-50" id="palette-backdrop"></div>
  <div
    class="relative bg-zinc-900 rounded-lg shadow-xl w-full max-w-2xl border border-zinc-700"
  >
    <input
      type="text"
      id="palette-input"
      class="w-full px-4 py-3 bg-transparent text-zinc-100 placeholder-zinc-500 outline-none border-b border-zinc-700"
      placeholder={placeholder}
      autocomplete="off"
    />
    <div id="palette-results" class="max-h-96 overflow-y-auto"></div>
  </div>
</div>

<script>
  import Fuse from 'fuse.js'
  import { $commandItems } from '../store.ts'

  interface SearchResult {
    id: string
    type: string
    title: string
    description: string
    url: string
    body: string
  }

  let isOpen = false
  let selectedIndex = 0
  let filteredItems: (CommandItem | SearchResult)[] = []
  let searchIndex: SearchResult[] = []
  let searchIndexLoaded = false
  let contentFuse: Fuse<SearchResult> | null = null
  let commandFuse: Fuse<CommandItem> | null = null

  const palette = document.getElementById('command-palette')!
  const input = document.getElementById('palette-input') as HTMLInputElement
  const results = document.getElementById('palette-results')!
  const backdrop = document.getElementById('palette-backdrop')!

  // Load search index
  async function loadSearchIndex() {
    if (searchIndexLoaded) return
    try {
      const response = await fetch('/api/search-index.json')
      searchIndex = await response.json()
      searchIndexLoaded = true

      // Initialize Fuse for content search
      contentFuse = new Fuse(searchIndex, {
        keys: [
          { name: 'title', weight: 2 },
          { name: 'description', weight: 1.5 },
          { name: 'body', weight: 1 }
        ],
        threshold: 0.4,
        includeScore: true,
        minMatchCharLength: 2,
      })
    } catch (error) {
      console.error('Failed to load search index:', error)
    }
  }

  function open() {
    isOpen = true
    palette.classList.remove('hidden')
    palette.classList.add('flex')
    input.focus()
    selectedIndex = 0
    loadSearchIndex() // Load index when opening

    // Initialize command Fuse
    const commands = $commandItems.get()
    commandFuse = new Fuse(commands, {
      keys: [
        { name: 'name', weight: 2 },
        { name: 'description', weight: 1.5 },
        { name: 'keywords', weight: 1 }
      ],
      threshold: 0.3,
      includeScore: true,
    })

    render()
  }

  function close() {
    isOpen = false
    palette.classList.add('hidden')
    palette.classList.remove('flex')
    input.value = ''
    selectedIndex = 0
  }

  function searchContent(query: string): SearchResult[] {
    if (!query || !searchIndexLoaded || !contentFuse) return []

    const results = contentFuse.search(query)
    return results.slice(0, 10).map(result => result.item)
  }

  function searchCommands(query: string): CommandItem[] {
    if (!query || !commandFuse) return $commandItems.get()

    const results = commandFuse.search(query)
    return results.map(result => result.item)
  }

  function filter(query: string): (CommandItem | SearchResult)[] {
    const commands = searchCommands(query)
    const contentResults = searchContent(query)

    // If no query, show only commands
    if (!query) return commands

    // Combine commands and content results
    return [...commands, ...contentResults]
  }

  function isSearchResult(item: any): item is SearchResult {
    return 'url' in item && 'type' in item
  }

  function render() {
    const query = input.value
    filteredItems = filter(query)

    if (filteredItems.length === 0) {
      results.innerHTML =
        '<div class="px-4 py-8 text-center text-zinc-500">No results found</div>'
      return
    }

    results.innerHTML = filteredItems
      .map((item, index) => {
        const isSelected = index === selectedIndex

        if (isSearchResult(item)) {
          return `
            <div
              class="px-4 py-3 cursor-pointer transition-colors ${
                isSelected
                  ? 'bg-zinc-800 text-zinc-100'
                  : 'text-zinc-300 hover:bg-zinc-800'
              }"
              data-index="${index}"
            >
              <div class="flex items-center gap-2">
                <span class="text-xs px-2 py-0.5 rounded bg-zinc-700 text-zinc-400">${item.type}</span>
                <div class="font-medium">${item.title}</div>
              </div>
              ${item.description ? `<div class="text-sm text-zinc-500 mt-1">${item.description}</div>` : ''}
            </div>
          `
        } else {
          return `
            <div
              class="px-4 py-3 cursor-pointer transition-colors ${
                isSelected
                  ? 'bg-zinc-800 text-zinc-100'
                  : 'text-zinc-300 hover:bg-zinc-800'
              }"
              data-index="${index}"
            >
              <div class="font-medium">${item.name}</div>
              ${item.description ? `<div class="text-sm text-zinc-500">${item.description}</div>` : ''}
            </div>
          `
        }
      })
      .join('')

    // Add click handlers
    results.querySelectorAll('[data-index]').forEach((el) => {
      el.addEventListener('click', () => {
        const index = parseInt((el as HTMLElement).dataset.index!)
        execute(filteredItems[index])
      })
    })
  }

  function execute(item: CommandItem | SearchResult) {
    close()
    if (isSearchResult(item)) {
      window.location.href = item.url
    } else {
      item.handler()
    }
  }

  function moveSelection(delta: number) {
    selectedIndex = Math.max(
      0,
      Math.min(filteredItems.length - 1, selectedIndex + delta),
    )
    render()
  }

  // Global keyboard handler
  document.addEventListener('keydown', (e) => {
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault()
      if (isOpen) {
        close()
      } else {
        open()
      }
      return
    }

    if (!isOpen) return

    switch (e.key) {
      case 'Escape':
        e.preventDefault()
        close()
        break
      case 'ArrowDown':
        e.preventDefault()
        moveSelection(1)
        break
      case 'ArrowUp':
        e.preventDefault()
        moveSelection(-1)
        break
      case 'Enter':
        e.preventDefault()
        if (filteredItems[selectedIndex]) {
          execute(filteredItems[selectedIndex])
        }
        break
    }
  })

  // Input handler
  input.addEventListener('input', () => {
    selectedIndex = 0
    render()
  })

  // Backdrop click
  backdrop.addEventListener('click', close)

  // Initial render
  render()
</script>
