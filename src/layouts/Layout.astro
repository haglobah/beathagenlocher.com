---
import { SEO } from 'astro-seo'
import MainPageIconButton from '../components/MainPageIconButton.astro'
import CommandPalette from '../components/CommandPalette.astro'

export interface Props {
  title?: string
  desc?: string
  type?: string
  coverImage?: string
}

const { title, desc, type, coverImage } = Astro.props

/* const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString(); */

// Generate OG image URL
const currentPath = Astro.url.pathname
const contentId = currentPath.split('/').filter(Boolean).join('/')

// Use localhost URL in development, production URL otherwise
const baseUrl = import.meta.env.DEV ? 'http://localhost:4321' : Astro.site

// Construct OG image URL - now just using the content ID directly
const ogImageURL = type
  ? new URL(`/og/${contentId}.png`, baseUrl)
  : new URL(`/og.png`, baseUrl)

// Only add search params for non-content pages (like the homepage)
if (!type) {
  if (title) ogImageURL.searchParams.set('title', title)
  if (desc) ogImageURL.searchParams.set('description', desc)
  if (coverImage) ogImageURL.searchParams.set('coverImage', coverImage)
}

// Google Analytics type declarations
declare global {
  interface Window {
    dataLayer: any[]
    gtag: (...args: any[]) => void
  }
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="/preflight.css" />
    <link rel="stylesheet" href="/style.css" />
    <script type="module" src="https://js.withorbit.com/orbit-web-component.js"
    ></script>
    <SEO
      title={title}
      description={desc || "Beat's digital garden filled with written thinking"}
      openGraph={{
        basic: {
          type: 'website',
          url: Astro.url.href,
          title: title || 'Beat Hagenlocher',
          image: ogImageURL.toString(),
        },
      }}
    />
  </head><body
    class="font-sans font-normal f-text-sm bg-zinc-800 text-zinc-300 leading-[1.6] antialiased selection:bg-sienna-light selection:text-zinc-800 max-w-screen-xl mx-auto scroll-smooth"
  >
    <CommandPalette placeholder="Search commands and content..." />
    <div class="flex f-my-xl justify-center items-center gap-4">
      <MainPageIconButton classStyle="f-w-128-164" />
      <button
        id="search-button"
        class="px-4 py-2 bg-zinc-700 hover:bg-zinc-600 text-zinc-300 rounded-full transition-colors flex items-center gap-2 relative"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="absolute h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <span class="pl-8 pt-0.5">Search</span>
        <span class="px-2 pt-0.5 text-lg font-bold">Ctrl K</span>
      </button>
    </div>
    <main class="f-mb-md min-h-screen">
      <slot />
    </main>
  </body>
</html>

<script>
  import { registerCommands } from '../store.ts'

  registerCommands([
    {
      id: 'home',
      name: 'Go Home',
      description: 'Navigate to homepage',
      handler: () => (window.location.href = '/'),
      keywords: ['navigate', 'index'],
    },
    // {
    //   id: 'theme',
    //   name: 'Toggle Theme',
    //   handler: () => console.log('Toggle theme'),
    // },
  ])

  const searchButton = document.getElementById('search-button')
  if (searchButton) {
    searchButton.addEventListener('click', () => {
      const event = new KeyboardEvent('keydown', {
        key: 'k',
        metaKey: true,
        bubbles: true,
      })
      document.dispatchEvent(event)
    })
  }
</script>
