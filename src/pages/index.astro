---
import { getCollection, render } from "astro:content";
import Layout from "../layouts/Layout.astro";

import Il from "../components/InnerLink.astro";
import BadgeSelection from "../components/BadgeSelection.astro";
import WideCard from "../components/WideCard.astro";
import StreamCard from "../components/StreamCard.astro";
import Clamp from "../components/Clamp.astro";

// Get all notes that should be published
const publishedNotes = await getCollection("notes", ({ data }) => data.publish);
const draftNotes = await getCollection("notes", ({ data }) => !data.publish);
const publishedKnowledge = await getCollection("knowledge", ({ data }) => data.publish);
const draftKnowledge = await getCollection("knowledge", ({ data }) => !data.publish);
const publishedEssays = await getCollection("essays", ({ data }) => data.publish);
const draftEssays = await getCollection("essays", ({ data }) => !data.publish);
const publishedTalks = await getCollection("talks", ({ data }) => data.publish);
const draftTalks = await getCollection("talks", ({ data }) => !data.publish);
const stream = await getCollection("stream", ({ data }) => data.publish);

const allTheContent = [
  publishedNotes, draftNotes,
  publishedKnowledge, draftKnowledge,
  publishedEssays, draftEssays,
  publishedTalks, draftTalks,
  stream,
]

const topics = [... new Set(allTheContent
  .flatMap((collection) =>
    collection.flatMap(({ data }) =>
      data.topics
)))]

// Sort notes by date
const sortByUpdated = (notes) => notes.sort(
  (a, b) =>
  new Date(b.data.updated).getTime() - new Date(a.data.updated).getTime(),
);
const sortByStartDate = (notes) => notes.sort(
  (a, b) =>
  new Date(b.data.startDate).getTime() - new Date(a.data.startDate).getTime(),
);

const renderedStream = await Promise.all(
  sortByStartDate(stream).map(async (streamlet: CollectionEntry<"stream">) => {
    const { Content } = await render(streamlet);
    return { ...streamlet, Content };
  }),
);

import { components } from '../mdxcomponents.ts'

---

<Layout title="Beat Hagenlochers Digital Garden">
  <div class="f-my-lg f-mx-md">
    <div class="f-py-lg">
      <h1 class="f-text-3xl leading-snug">
        <Il href="me">Beat Hagenlocher</Il> <br> thinking out loud.
      </h1>
      <Clamp>
        <BadgeSelection size="f-text-sm" topics={topics}/>
      </Clamp>
    </div>
    <div class="md:grid md:grid-cols-12 f-gap-xl">
      <div class="md:col-span-7">

        <div class="f-mt-md f-mb-2xl">
          <h2 class="f-text-sm font-bold f-pb-4-8 uppercase tracking-[0.17em]">
            Notes
          </h2>
          <p class="italic f-text-xs">
            Loose thoughts still getting formed
          </p>
        </div>
        <div class="sm:grid sm:grid-cols-2 f-gap-lg">
          {sortByUpdated(publishedNotes).map((content) => (
          <div class="content-item" data-topics={JSON.stringify(content.data.topics)}>
            <WideCard to={content.id}
                      title={content.data.title}
                      topics={content.data.topics}
            >{content.data.description}</WideCard>
          </div>
          ))}
          {sortByUpdated(draftNotes).map((content) => (
          <div class="content-item opacity-50" data-topics={JSON.stringify(content.data.topics)}>
            <WideCard to={content.id}
                      title={content.data.title}
                      topics={content.data.topics}
            >{content.data.description}</WideCard>
          </div>
          ))}
        </div>

        <div class="f-mt-md f-mb-2xl">
          <h2 class="f-text-sm font-bold f-pb-4-8 uppercase tracking-[0.17em]">
            Knowledge Bits
          </h2>
          <p class="italic f-text-xs">
            What you always wanted to know
          </p>
        </div>
        <div class="sm:grid sm:grid-cols-4 f-gap-lg">
          {sortByUpdated(publishedKnowledge).map((content) => (
          <div class="content-item" data-topics={JSON.stringify(content.data.topics)}>
            <WideCard to={content.id}
                      title={content.data.title}
                      topics={content.data.topics}
            >{content.data.description}</WideCard>
          </div>
          ))}
          {sortByUpdated(draftKnowledge).map((content) => (
          <div class="content-item opacity-50" data-topics={JSON.stringify(content.data.topics)}>
            <WideCard to={content.id}
                      title={content.data.title}
                      topics={content.data.topics}
            >{content.data.description}</WideCard>
          </div>
          ))}
        </div>

        <div class="f-mt-md f-mb-2xl">
          <h2 class="f-text-sm font-bold f-pb-4-8 uppercase tracking-[0.17em]">
            The Stream
          </h2>
          <p class="italic f-text-xs">
            Tiny pieces of thinking, links and knowledge, streamified
          </p>
        </div>
        <div class="f-mb-2xl">
          {renderedStream.map((streamlet) => (
          <div class="content-item" data-topics={JSON.stringify(streamlet.data.topics)}>
            <StreamCard title={streamlet.data.title}
                        topics={streamlet.data.topics}
                        date={streamlet.data.startDate}
            ><streamlet.Content components={components} /></StreamCard>
          </div>
          ))}
        </div>
      </div>

      <div class="md:col-span-5">
        <div class="f-mt-md f-mb-2xl">
          <h2 class="f-text-sm font-bold f-pb-4-8 uppercase tracking-[0.17em]">
            Atomic Essays
          </h2>
          <p class="italic f-text-xs">
            Short form writing capturing a single idea
          </p>
        </div>
        {sortByUpdated(publishedEssays).map((content) => (
        <div class="content-item" data-topics={JSON.stringify(content.data.topics)}>
          <WideCard to={content.id}
                    title={content.data.title}
                    topics={content.data.topics}
          >{content.data.description}</WideCard>
        </div>
        ))}
        {sortByUpdated(draftEssays).map((content) => (
        <div class="content-item opacity-50" data-topics={JSON.stringify(content.data.topics)}>
          <WideCard to={content.id}
                    title={content.data.title}
                    topics={content.data.topics}
          >{content.data.description}</WideCard>
        </div>
        ))}
      </div>

      <div class="col-span-12">
        <h2 class="f-text-sm font-bold f-pb-4-8 uppercase tracking-[0.17em] f-my-md">
          Talks
        </h2>
        {sortByUpdated(publishedTalks).map((content) => (
        <div class="content-item" data-topics={JSON.stringify(content.data.topics)}>
          <WideCard to={content.id}
                    title={content.data.title}
                    topics={content.data.topics}
          >{content.data.description}</WideCard>
        </div>
        ))}
        {sortByUpdated(draftTalks).map((content) => (
        <div class="content-item opacity-50" data-topics={JSON.stringify(content.data.topics)}>
          <WideCard to={content.id}
                    title={content.data.title}
                    topics={content.data.topics}
          >{content.data.description}</WideCard>
        </div>
        ))}
      </div>
    </div>
  </div>
</Layout>

<script>
 import { selectedTopics } from '../store.js';

 function filterContent() {
   const selected = selectedTopics.get();
   const contentItems = document.querySelectorAll('.content-item');

   contentItems.forEach(item => {
     const itemTopics = JSON.parse(item.dataset.topics || '[]');

     if (selected.length === 0) {
       // Show everything if no topics selected
       item.style.display = '';
     } else {
       // Check if any of the item's topics match the selected topics
       const hasMatch = itemTopics.some(topic => selected.includes(topic));
       item.style.display = hasMatch ? '' : 'none';
     }
   });
 }

 // Subscribe to store changes
 selectedTopics.subscribe(filterContent);

 // Initial filter
 filterContent();
</script>
